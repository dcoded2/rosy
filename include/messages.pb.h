// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace beta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class base;
class endpoint;
class heartbeat;
class join;
class drop;
class publish;

// ===================================================================

class base : public ::google::protobuf::Message {
 public:
  base();
  virtual ~base();

  base(const base& from);

  inline base& operator=(const base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const base& default_instance();

  void Swap(base* other);

  // implements Message ----------------------------------------------

  base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const base& from);
  void MergeFrom(const base& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:beta.base)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static base* default_instance_;
};
// -------------------------------------------------------------------

class endpoint : public ::google::protobuf::Message {
 public:
  endpoint();
  virtual ~endpoint();

  endpoint(const endpoint& from);

  inline endpoint& operator=(const endpoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const endpoint& default_instance();

  void Swap(endpoint* other);

  // implements Message ----------------------------------------------

  endpoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const endpoint& from);
  void MergeFrom(const endpoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // required string next = 3;
  inline bool has_next() const;
  inline void clear_next();
  static const int kNextFieldNumber = 3;
  inline const ::std::string& next() const;
  inline void set_next(const ::std::string& value);
  inline void set_next(const char* value);
  inline void set_next(const char* value, size_t size);
  inline ::std::string* mutable_next();
  inline ::std::string* release_next();
  inline void set_allocated_next(::std::string* next);

  // optional string name = 2 [default = "<unnamed>"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:beta.endpoint)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_next();
  inline void clear_has_next();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* addr_;
  ::std::string* next_;
  ::std::string* name_;
  static ::std::string* _default_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static endpoint* default_instance_;
};
// -------------------------------------------------------------------

class heartbeat : public ::google::protobuf::Message {
 public:
  heartbeat();
  virtual ~heartbeat();

  heartbeat(const heartbeat& from);

  inline heartbeat& operator=(const heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const heartbeat& default_instance();

  void Swap(heartbeat* other);

  // implements Message ----------------------------------------------

  heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const heartbeat& from);
  void MergeFrom(const heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "heartbeat"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated .beta.endpoint endpoints = 2;
  inline int endpoints_size() const;
  inline void clear_endpoints();
  static const int kEndpointsFieldNumber = 2;
  inline const ::beta::endpoint& endpoints(int index) const;
  inline ::beta::endpoint* mutable_endpoints(int index);
  inline ::beta::endpoint* add_endpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::beta::endpoint >&
      endpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::beta::endpoint >*
      mutable_endpoints();

  // required int32 cycles = 3 [default = 0];
  inline bool has_cycles() const;
  inline void clear_cycles();
  static const int kCyclesFieldNumber = 3;
  inline ::google::protobuf::int32 cycles() const;
  inline void set_cycles(::google::protobuf::int32 value);

  // optional int32 created = 4 [default = 0];
  inline bool has_created() const;
  inline void clear_created();
  static const int kCreatedFieldNumber = 4;
  inline ::google::protobuf::int32 created() const;
  inline void set_created(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:beta.heartbeat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cycles();
  inline void clear_has_cycles();
  inline void set_has_created();
  inline void clear_has_created();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  static ::std::string* _default_type_;
  ::google::protobuf::RepeatedPtrField< ::beta::endpoint > endpoints_;
  ::google::protobuf::int32 cycles_;
  ::google::protobuf::int32 created_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class join : public ::google::protobuf::Message {
 public:
  join();
  virtual ~join();

  join(const join& from);

  inline join& operator=(const join& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join& default_instance();

  void Swap(join* other);

  // implements Message ----------------------------------------------

  join* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join& from);
  void MergeFrom(const join& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "join"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required .beta.endpoint self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  inline const ::beta::endpoint& self() const;
  inline ::beta::endpoint* mutable_self();
  inline ::beta::endpoint* release_self();
  inline void set_allocated_self(::beta::endpoint* self);

  // @@protoc_insertion_point(class_scope:beta.join)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  static ::std::string* _default_type_;
  ::beta::endpoint* self_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static join* default_instance_;
};
// -------------------------------------------------------------------

class drop : public ::google::protobuf::Message {
 public:
  drop();
  virtual ~drop();

  drop(const drop& from);

  inline drop& operator=(const drop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const drop& default_instance();

  void Swap(drop* other);

  // implements Message ----------------------------------------------

  drop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const drop& from);
  void MergeFrom(const drop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "drop"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required .beta.endpoint self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  inline const ::beta::endpoint& self() const;
  inline ::beta::endpoint* mutable_self();
  inline ::beta::endpoint* release_self();
  inline void set_allocated_self(::beta::endpoint* self);

  // @@protoc_insertion_point(class_scope:beta.drop)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  static ::std::string* _default_type_;
  ::beta::endpoint* self_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static drop* default_instance_;
};
// -------------------------------------------------------------------

class publish : public ::google::protobuf::Message {
 public:
  publish();
  virtual ~publish();

  publish(const publish& from);

  inline publish& operator=(const publish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const publish& default_instance();

  void Swap(publish* other);

  // implements Message ----------------------------------------------

  publish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const publish& from);
  void MergeFrom(const publish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .beta.endpoint origin = 1;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 1;
  inline const ::beta::endpoint& origin() const;
  inline ::beta::endpoint* mutable_origin();
  inline ::beta::endpoint* release_origin();
  inline void set_allocated_origin(::beta::endpoint* origin);

  // required string channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // required string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:beta.publish)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::beta::endpoint* origin_;
  ::std::string* channel_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static publish* default_instance_;
};
// ===================================================================


// ===================================================================

// base

// optional string type = 1;
inline bool base::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void base::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void base::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void base::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& base::type() const {
  return *type_;
}
inline void base::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void base::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void base::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* base::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* base::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void base::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// endpoint

// required string addr = 1;
inline bool endpoint::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void endpoint::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void endpoint::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void endpoint::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& endpoint::addr() const {
  return *addr_;
}
inline void endpoint::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void endpoint::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void endpoint::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* endpoint::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* endpoint::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void endpoint::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string next = 3;
inline bool endpoint::has_next() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void endpoint::set_has_next() {
  _has_bits_[0] |= 0x00000002u;
}
inline void endpoint::clear_has_next() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void endpoint::clear_next() {
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    next_->clear();
  }
  clear_has_next();
}
inline const ::std::string& endpoint::next() const {
  return *next_;
}
inline void endpoint::set_next(const ::std::string& value) {
  set_has_next();
  if (next_ == &::google::protobuf::internal::kEmptyString) {
    next_ = new ::std::string;
  }
  next_->assign(value);
}
inline void endpoint::set_next(const char* value) {
  set_has_next();
  if (next_ == &::google::protobuf::internal::kEmptyString) {
    next_ = new ::std::string;
  }
  next_->assign(value);
}
inline void endpoint::set_next(const char* value, size_t size) {
  set_has_next();
  if (next_ == &::google::protobuf::internal::kEmptyString) {
    next_ = new ::std::string;
  }
  next_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* endpoint::mutable_next() {
  set_has_next();
  if (next_ == &::google::protobuf::internal::kEmptyString) {
    next_ = new ::std::string;
  }
  return next_;
}
inline ::std::string* endpoint::release_next() {
  clear_has_next();
  if (next_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = next_;
    next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void endpoint::set_allocated_next(::std::string* next) {
  if (next_ != &::google::protobuf::internal::kEmptyString) {
    delete next_;
  }
  if (next) {
    set_has_next();
    next_ = next;
  } else {
    clear_has_next();
    next_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2 [default = "<unnamed>"];
inline bool endpoint::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void endpoint::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void endpoint::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void endpoint::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& endpoint::name() const {
  return *name_;
}
inline void endpoint::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void endpoint::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void endpoint::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* endpoint::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* endpoint::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void endpoint::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// -------------------------------------------------------------------

// heartbeat

// optional string type = 1 [default = "heartbeat"];
inline bool heartbeat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void heartbeat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void heartbeat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void heartbeat::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& heartbeat::type() const {
  return *type_;
}
inline void heartbeat::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void heartbeat::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void heartbeat::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heartbeat::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* heartbeat::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void heartbeat::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}

// repeated .beta.endpoint endpoints = 2;
inline int heartbeat::endpoints_size() const {
  return endpoints_.size();
}
inline void heartbeat::clear_endpoints() {
  endpoints_.Clear();
}
inline const ::beta::endpoint& heartbeat::endpoints(int index) const {
  return endpoints_.Get(index);
}
inline ::beta::endpoint* heartbeat::mutable_endpoints(int index) {
  return endpoints_.Mutable(index);
}
inline ::beta::endpoint* heartbeat::add_endpoints() {
  return endpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::beta::endpoint >&
heartbeat::endpoints() const {
  return endpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::beta::endpoint >*
heartbeat::mutable_endpoints() {
  return &endpoints_;
}

// required int32 cycles = 3 [default = 0];
inline bool heartbeat::has_cycles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void heartbeat::set_has_cycles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void heartbeat::clear_has_cycles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void heartbeat::clear_cycles() {
  cycles_ = 0;
  clear_has_cycles();
}
inline ::google::protobuf::int32 heartbeat::cycles() const {
  return cycles_;
}
inline void heartbeat::set_cycles(::google::protobuf::int32 value) {
  set_has_cycles();
  cycles_ = value;
}

// optional int32 created = 4 [default = 0];
inline bool heartbeat::has_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void heartbeat::set_has_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void heartbeat::clear_has_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void heartbeat::clear_created() {
  created_ = 0;
  clear_has_created();
}
inline ::google::protobuf::int32 heartbeat::created() const {
  return created_;
}
inline void heartbeat::set_created(::google::protobuf::int32 value) {
  set_has_created();
  created_ = value;
}

// -------------------------------------------------------------------

// join

// optional string type = 1 [default = "join"];
inline bool join::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& join::type() const {
  return *type_;
}
inline void join::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void join::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void join::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* join::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* join::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void join::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}

// required .beta.endpoint self = 2;
inline bool join::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void join::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void join::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void join::clear_self() {
  if (self_ != NULL) self_->::beta::endpoint::Clear();
  clear_has_self();
}
inline const ::beta::endpoint& join::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::beta::endpoint* join::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::beta::endpoint;
  return self_;
}
inline ::beta::endpoint* join::release_self() {
  clear_has_self();
  ::beta::endpoint* temp = self_;
  self_ = NULL;
  return temp;
}
inline void join::set_allocated_self(::beta::endpoint* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// drop

// optional string type = 1 [default = "drop"];
inline bool drop::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void drop::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void drop::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void drop::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& drop::type() const {
  return *type_;
}
inline void drop::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void drop::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void drop::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* drop::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  return type_;
}
inline ::std::string* drop::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void drop::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
}

// required .beta.endpoint self = 2;
inline bool drop::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void drop::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void drop::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void drop::clear_self() {
  if (self_ != NULL) self_->::beta::endpoint::Clear();
  clear_has_self();
}
inline const ::beta::endpoint& drop::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::beta::endpoint* drop::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::beta::endpoint;
  return self_;
}
inline ::beta::endpoint* drop::release_self() {
  clear_has_self();
  ::beta::endpoint* temp = self_;
  self_ = NULL;
  return temp;
}
inline void drop::set_allocated_self(::beta::endpoint* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// publish

// required .beta.endpoint origin = 1;
inline bool publish::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void publish::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void publish::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void publish::clear_origin() {
  if (origin_ != NULL) origin_->::beta::endpoint::Clear();
  clear_has_origin();
}
inline const ::beta::endpoint& publish::origin() const {
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::beta::endpoint* publish::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::beta::endpoint;
  return origin_;
}
inline ::beta::endpoint* publish::release_origin() {
  clear_has_origin();
  ::beta::endpoint* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void publish::set_allocated_origin(::beta::endpoint* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
}

// required string channel = 2;
inline bool publish::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void publish::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void publish::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void publish::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& publish::channel() const {
  return *channel_;
}
inline void publish::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void publish::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void publish::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* publish::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* publish::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void publish::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string data = 3;
inline bool publish::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void publish::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void publish::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void publish::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& publish::data() const {
  return *data_;
}
inline void publish::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void publish::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void publish::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* publish::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* publish::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void publish::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beta

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
